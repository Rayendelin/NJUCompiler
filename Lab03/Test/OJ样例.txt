M1
int main() 
{
  int n;
  n = read();
  if (n > 0) write(1);
  else if (n < 0) write (-1);
  else write(0);
  return 0;}

M2
int fact(int n) 
{
  if (n == 1)
    return n;
  else
    return (n * fact(n - 1)); 
}int main(){
  int m, result;
  m = read();
  if (m > 1)
    result = fact(m);
  else
    result = 1;
  write(result);
  return 0;}

O1
struct Operands{
  int o1;
  int o2;};

int add(struct Operands temp){
  return (temp.o1 + temp.o2);}

int main(){
  int n;
  struct Operands op;
  op.o1 = 1;
  op.o2 = 2;
  n = add(op);
  write(n);
  return 0;}

O2
int add(int temp[2]){
  return (temp[0] + temp[1]);}

int main(){
  int op[2];
  int r[1][2];
  int i = 0, j = 0;
  while (i < 2)
  {
    while (j < 2)
    {
      op[j] = i + j;
      j = j + 1;
    }
    r[0][i] = add(op);
    write(r[0][i]);
    i = i + 1;
    j = 0;
  }
  return 0;}

A1
int main() {
  int result = 0;
  int i = 9, j = 32, k = 57;
  i = i * (i * j - k);
  write(i);
  j = i - (j + k * (k - 1)) * (-1);
  write(j);
  k = j - (k + k * j + 1 * (i + j + k)) / (i / 2);
  write(k);
  result = i + j - k;
  write(result);
  return 0;}

A2
int main() {
  int x;
  int y;
  int z;
  x = read();
  y = read();
  z = read();
  if (x > 0 & y > 0) {
    write(1);
  } else {
    if (x == 0 & y == 0) {
      write(2);
    } else {
      if (x < 0 & y < 0) {
        write(3);
      } else {
        if (x >= y) {
          write(4);
        } else {
          if (x < z & z < y) {
            write(5);
          } else {
            write(6);
          }
        }
      }
    }
  }
  return 0;}

A3
int main() {
  int i;
  int j;
  int o_cnt = 0;
  int i_cnt = 0;
  int len = 10;
  int arr[10];
  int result = 0;

  i_cnt = 0;
  while (i_cnt < len) {
    arr[i_cnt] = 0;
    i_cnt = i_cnt + 1;
  }
  
  o_cnt = 0;
  while (o_cnt < 3) {
    i = read();
    j = read();
    if (i > 10) {
      i = 1 + i - i / 10 * 10;
    }
    if (j > 10) {
      j = 2 + j - j / 10 * 10;
    }

    i_cnt = 0;
    while (i_cnt < len) {
      arr[i_cnt] = arr[i_cnt] / 2 + i - j;
      i_cnt = i_cnt + 1;
    }
    o_cnt = o_cnt + 1;
  }

  i_cnt = 0;
  while (i_cnt < len) {
    result = result + arr[i_cnt];
    i_cnt = i_cnt + 1;
  }
  write(result);
  return 0;}

A4
int main() {
  int i;
  int j;
  int cnt;
  int len = 10;
  int arr1[10];
  int arr2[10];
  int result = 0;

  i = read();
  cnt = 0;
  while (cnt < len) {
    arr1[cnt] = i + cnt;
    cnt = cnt + 1;
  }

  arr2[0] = 2;
  cnt = 1;
  while (cnt < len) {
    int tmp = arr1[cnt] - arr1[cnt] / 3 * 3;
    if (tmp == 0) {
      arr2[cnt] = arr1[cnt];
    } else {
      arr2[cnt] = - arr1[cnt];
    }
    cnt = cnt + 1;
  }

  cnt = 0;
  while (cnt < len) {
    result = result + arr2[cnt];
    cnt = cnt + 1;
  }
  write(result);
  return 0;}

A5
int cal_sum(int s1, int s2, int s3) {
  int s_res = s1 + s2 + s3;
  return s_res;
}

int mod(int m1, int m2) {
  int m_res = m1 - m1 / m2 * m2;
  return m_res;
}

int is_good(int x) {
  int a = x * 2;
  int b = x + 2;
  int c = x * x;
  int sum = cal_sum(a, b, c);
  int rem = mod(sum, 5);
  if (rem > 1) {
    return 1;
  } else {
    return 0;
  }
}

int main() {
  int f;
  int g;
  int h;
  f = read();
  g = read();
  h = read();
  if (is_good(f)) {
    write(cal_sum(f, g, h));
  } else {
    write(0);
  }
  return 0;
}


B1
int mod(int m1, int m2) {
  int m_res = m1 - m1 / m2 * m2;
  return m_res;
}

int is_palindrome_number(int x) {
  int div = 1;
  if (x < 0) {
    return 0;
  }

  while ((x / div) >= 10) {
    div = div * 10;
  }

  while (x) {
    if ((x / div) != mod(x, 10)) {
      return 0;
    }
    x = (mod(x, div)) / 10;
    div = div / 100;
  }
  return 1;
}

int main() {
  int i;
  i = read();
  if (is_palindrome_number(i)) {
    write(1);
  } else {
    write(0);
  }
  return 0;
}


B2
int main() {
  int n1;
  int n2;
  int a1[10];
  int a2[10];
  int a[20];
  int i = 0, j = 0, k = 0, n = 0;
  int cnt = 0;

  n1 = read();
  if (n1 > 10) {
    n1 = 10;
  }
  while (cnt < n1) {
    a1[cnt] = read();
    cnt = cnt + 1;
  }

  n2 = read();
  if (n2 > 10) {
    n2 = 10;
  }
  cnt = 0;
  while (cnt < n2) {
    a2[cnt] = read();
    cnt = cnt + 1;
  }

  while (i < n1 & j < n2) {
    if (a1[i] < a2[j]) {
      a[k] = a1[i];
      k = k + 1;
      i = i + 1;
    } else {
      a[k] = a2[j];
      k = k + 1;
      j = j + 1;
    }
  }

  while (i < n1) {
    a[k] = a1[i];
    k = k + 1;
    i = i + 1;
  }
  while (j < n2) {
    a[k] = a2[j];
    k = k + 1;
    j = j + 1;
  }

  if ((n1 + n2 == 0) | (n1 + n2 == 1)) {
    write(a[n1 + n2 - 1]);
  } else if (n1 + n2 == 2) {
    write((a[n1 + n2 - 1] + a[n1 + n2 - 2]) / 2);
  } else {
    n = n1 + n2;
    if ((n - (n / 2) * 2) == 0) {
      write((a[n / 2] + a[n / 2 - 1]) / 2);
    } else {
      write(a[n / 2]);
    }
  }
  return 0;
}


B3
int main() {
  int idx, s, e;
  int tmp1, tmp2;
  int len = 5;
  int a[5];
  int cnt = 0;
  int stop = 0;
  while (cnt < len) {
    a[cnt] = read();
    cnt = cnt + 1;
  }

  cnt = len / 2 - 1;
  while (cnt >= 0) {
    s = cnt;
    e = len;
    tmp1 = a[s];
    stop = 0;
    while ((s * 2 + 1 < e) & !stop) {
      idx = s * 2 + 1;
      if ((idx + 1 < e) & a[idx + 1] > a[idx]) {
        idx = idx + 1;
      }
      if (a[idx] > tmp1) {
        a[s] = a[idx];
        s = idx;
      } else {
        stop = 1;
      }
    }
    a[s] = tmp1;
    cnt = cnt - 1;
  }

  cnt = len - 1;
  while (cnt >= 0) {
    tmp2 = a[0];
    a[0] = a[cnt];
    a[cnt] = tmp2;
    s = 0;
    e = cnt;
    tmp1 = a[s];
    stop = 0;
    while ((s * 2 + 1 < e) & !stop) {
      idx = s * 2 + 1;
      if ((idx + 1 < e) & a[idx + 1] > a[idx]) {
        idx = idx + 1;
      }
      if (a[idx] > tmp1) {
        a[s] = a[idx];
        s = idx;
      } else {
        stop = 1;
      }
    }
    a[s] = tmp1;
    cnt = cnt - 1;
  }

  cnt = 0;
  while (cnt < len) {
    write(a[cnt]);
    cnt = cnt + 1;
  }
  return 0;
}


C1
int cal_mid(int c1, int c2) {
    return (c1 + c2) / 2;
}

int main() {
  int len = 5;
  int a[5];
  int cnt = 0;
  int i = 0, j = 0, tmp = 0;
  int low, high;
  int key;
  while (cnt < len) {
    a[cnt] = read();
    cnt = cnt + 1;
  }

  i = 0;
  while (i < len - 1) {
    j = 0;
    while (j < len - 1) {
      if (a[j] > a[j + 1]) {
        tmp = a[j];
        a[j] = a[j + 1];
        a[j + 1] = tmp;
      }
      j = j + 1;
    }
    i = i + 1;
  }

  i = 0;
  while (i < len) {
    write(a[i]);
    i = i + 1;
  }

  key = read();

  low = 0;
  high = len - 1;
  while (low <= high) {
    int mid = cal_mid(low, high);
    if (a[mid] == key) {
      write(1);
      return 0;
    } else if (a[mid] < key) {
      low = mid + 1;
    } else {
      high = mid - 1;
    }
  }
  write(0);
  return 0;
}


C2
int cal_mid(int c1, int c2) {
    return (c1 + c2) / 2;
}

int main() {
  int len = 5;
  int a[5];
  int cnt = 0;
  int i = 0, j = 0, tmp = 0;
  int low, high;
  int key;
  while (cnt < len) {
    a[cnt] = read();
    cnt = cnt + 1;
  }

  i = 0;
  while (i < len - 1) {
    j = 0;
    while (j < len - 1) {
      if (a[j] > a[j + 1]) {
        tmp = a[j];
        a[j] = a[j + 1];
        a[j + 1] = tmp;
      }
      j = j + 1;
    }
    i = i + 1;
  }

  i = 0;
  while (i < len) {
    write(a[i]);
    i = i + 1;
  }

  key = read();

  low = 0;
  high = len - 1;
  while (low <= high) {
    int mid = cal_mid(low, high);
    if (a[mid] == key) {
      write(1);
      return 0;
    } else if (a[mid] < key) {
      low = mid + 1;
    } else {
      high = mid - 1;
    }
  }
  write(0);
  return 0;
}


D1
int mod(int a, int b) {
  return a - (a / b) * b;
}

int do_work(int n) {
  int x1, x2, x3;
  n = mod(n, 5);
  x1 = 2 * n;
  x2 = n + n;
  x3 = 4 * 4;
  x1 = x3 + x2 + x1;
  x2 = x1 + (x1 + 1) * (x2 + 1) * (x3 + 1);
  x3 = x1 * (x1 + 1) + (x2 + 1) * (x2 + 1) + (x3 + 1) * (x3 + 1);
  x1 = (x1 + 1) + (x2 + 1) + (x3 + 1);
  return x1 + x2 + x3;
}

int main() {
  int t1 = 2;
  int t2 = 5;
  int t3 = 10;
  int i = 3 * (t2 * t3) - 100 / 5;
  int j = 42 - (t1 * t2) * (t1 * (t2 * t3) / 32) + 100;
  int k = 3 * 4 * 5 - 10 - (-(t1 * t2) * 3) - (t1 * t2) - (t1 * t2) + 3 + 2 + 1;
  int cnt = 0;
  int sum = 0;
  int len = t1 * t2;
  int array[10];
  int brray[10];
  while (cnt < k) {
    sum = sum + 1;
    array[mod(cnt, len)] = i;
    i = i + 1;
    cnt = cnt + 1;
  }
  cnt = 0;
  while (cnt < 100) {
    brray[mod(cnt, len)] = i;
    i = i + 1;
    cnt = cnt + 1;
  }

  cnt = 0;
  while (cnt < mod(do_work(10), 30)) {
    j = array[mod(cnt, len)];
    sum = sum + (-1) * cnt + do_work(j);
    j = j + 2 * cnt;
    j = j + 2 * cnt;
    j = j + 2 * cnt;
    if (mod(do_work(10), 10) == mod(do_work(j), 10)) {
      j = mod(j, 10);
    } else {
      j = mod(j, 20);
    }
    array[mod(cnt, len)] = j * j;
    cnt = cnt + 1;
  }
  j = j + array[0] + array[1];
  j = j + array[0] + array[1];
  j = j + array[0] + array[1];
  j = j + array[0] + array[1];
  write(j);
  write(array[0]);
  write(array[1]);
  write(array[2]);
  write(array[3]);
  write(array[4]);
  return 0;
}


E1-1
struct Animal {
  int weight;
  int height;
  int index;
};

int main() {
  struct Animal a, b;
  a.weight = 20;
  a.height = 30;
  b.weight = 25;
  b.height = 15;
  a.index = a.weight * a.weight / (a.height * a.height);
  b.index = b.weight * b.weight / (b.height * b.height);
  write(a.index + b.index);
  return 0;
}


E1-2
struct Point {
  int x;
  int y;
  int z;
};

int main() {
  int cnt = 0;
  int sum = 0;
  int len = 10;
  struct Point points[10];
  
  while (cnt < len) {
    points[cnt].x = cnt;
    points[cnt].y = cnt + cnt;
    points[cnt].z = cnt * cnt;
    cnt = cnt + 1;
  }

  cnt = 0;
  while (cnt < len) {
    if (cnt < 5) {
      sum = sum + points[cnt].y + points[cnt].z;
    } else {
      sum = sum + points[cnt].x + points[cnt].y;
    }
    cnt = cnt + 1;
  }
  write(sum);
  return 0;
}


E1-3
struct Point {
  int x;
  int y;
  int z;
};

struct Body {
  int tag;
  struct Point points[3];
};

int dot(struct Point dp1, struct Point dp2) {
  return dp1.x * dp2.x + dp1.y * dp2.y + dp1.z * dp2.z;
}

int sqrt(int si) {
  int s_cnt = 0;
  while (s_cnt <= si) {
    int lower = s_cnt * s_cnt;
    int upper = (s_cnt + 1) * (s_cnt + 1);
    if ((si >= lower) & (si < upper)) {
      return s_cnt;
    }
    s_cnt = s_cnt + 1;
  }
  return -1;
}

int dist(struct Point dip1, struct Point dip2) {
  return sqrt(dot(dip1, dip2));
}

int main() {
  struct Body bodies[3];
  int o_cnt = 0;
  int i_cnt = 0;
  while (o_cnt < 3) {
    i_cnt = 0;
    while (i_cnt < 3) {
      bodies[o_cnt].points[i_cnt].x = i_cnt * o_cnt + i_cnt;
      bodies[o_cnt].points[i_cnt].y = i_cnt * o_cnt * o_cnt + i_cnt;
      bodies[o_cnt].points[i_cnt].z = i_cnt * i_cnt * o_cnt * o_cnt + i_cnt;
      i_cnt = i_cnt + 1;
    }
    bodies[o_cnt].tag = dist(bodies[o_cnt].points[1], bodies[o_cnt].points[2]);
    o_cnt = o_cnt + 1;
  }
  write(bodies[0].tag + bodies[1].tag + bodies[2].tag);
  return 0;
}


E2-1
int main() {
  int len = 5;
  int mat1[5][5];
  int mat2[5][5];
  int o_cnt = 0;
  int i_cnt = 0;
  int m_res = 0;
  while (o_cnt < len) {
    i_cnt = 0;
    while (i_cnt < len) {
      mat1[o_cnt][i_cnt] = i_cnt;
      mat2[o_cnt][i_cnt] = o_cnt;
      i_cnt = i_cnt + 1;
    }
    o_cnt = o_cnt + 1;
  }

  o_cnt = 0;
  while (o_cnt < len) {
    i_cnt = 0;
    while (i_cnt < len) {
      m_res = m_res + mat1[o_cnt][i_cnt] * mat2[o_cnt][i_cnt];
      i_cnt = i_cnt + 1;
    }
    o_cnt = o_cnt + 1;
  }
  write(m_res);
  return 0;
}


E2-2
int quick_sort(int arr[6], int left, int right)
{
  int i, j, pivot;
  i = left;
  j = right;
  pivot = arr[left];

  if (i >= j) {
    return 0;
  }

  while (i < j) {
    while (i < j & arr[j] > pivot) {
      j = j - 1;
    }
    if (i < j) {
      arr[i] = arr[j];
      i = i + 1;
    }

    while (i < j & arr[i] < pivot) {
      i = i + 1;
    }
    if (i < j) {
      arr[j] = arr[i];
      j = j - 1;
    }
  }
  arr[i] = pivot;
  quick_sort(arr, left, i - 1);
  quick_sort(arr, i + 1, right);
  return 0;
}

int main() {
  int len = 6;
  int a[6];
  int cnt = 0;
  int sum = 0;
  while (cnt < len) {
    a[cnt] = read();
    cnt = cnt + 1;
  }

  quick_sort(a, 0, len - 1);

  cnt = 0;
  while (cnt < len) {
    write(a[cnt]);
    cnt = cnt + 1;
  }
  return 0;
}


E2-3
int get_max(int max_arr[4]) {
  int max_idx = 0;
  int max_val = max_arr[0];

  int max_len = 4;
  int max_cnt = 0;
  while (max_cnt < max_len) {
    if (max_arr[max_cnt] > max_val) {
      max_idx = max_cnt;
      max_val = max_arr[max_cnt];
    }
    max_cnt = max_cnt + 1;
  }
  return max_idx;
}

int mod(int m1, int m2) {
  return m1 - (m1 / m2) * m2;
}

int main() {
  int len = 4;
  int val_arr[4][4];
  int res_arr[4];
  int copy_arr[2];
  int o_cnt = 0;
  int i_cnt = 0;

  o_cnt = 0;
  while (o_cnt < len) {
    i_cnt = 0;
    while (i_cnt < len) {
      val_arr[o_cnt][i_cnt] = mod(o_cnt + i_cnt, len);
      i_cnt = i_cnt + 1;
    }
    res_arr[o_cnt] = get_max(val_arr[o_cnt]);
    o_cnt = o_cnt + 1;
  }

  write(res_arr[0]);
  write(res_arr[1]);
  return 0;
}
